Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pickle\r\nimport re\r\nimport smtplib\r\nimport ssl\r\nimport tkinter as tk\r\nimport webbrowser\r\nfrom tkinter import messagebox, filedialog , colorchooser , ttk\r\nfrom tkinter.ttk import Label\r\n\r\nfrom win32comext.shell.demos.servers.folder_view import make_item_enum\r\n\r\nfrom Model.edit import *\r\n\r\n\r\n\r\n\r\n\r\nclass NotepadUI:\r\n    def __init__(self, master):\r\n        self.master = master\r\n        self.master.title(\"Untitled   - AI Notepad\")\r\n        self.master.geometry(\"960x540\")\r\n        self.master.configure(bg=\"#f2fef7\")\r\n        self.master.protocol(\"WM_DELETE_WINDOW\",lambda: self.quit(False))\r\n\r\n        photo = tk.PhotoImage(file='website/rsc/JT.png')\r\n        self.master.wm_iconphoto(False, photo)\r\n\r\n        global current_opened_file\r\n        current_opened_file = False\r\n\r\n        global selected\r\n        selected = False\r\n\r\n        global font \r\n        font = [\"Lucida Console\", 12]\r\n\r\n        # Set up the UI elements\r\n\r\n        # Menu\r\n        # File Menu\r\n        menuBar = tk.Menu(self.master, bg=\"#f2fef7\", borderwidth=0)\r\n        self.master.config(menu=menuBar)\r\n        fileMenu = tk.Menu(menuBar, tearoff=0, bg=\"#f2fef7\")\r\n        fileMenu.add_command(label=\"New...\", command=lambda: self.new_file(\r\n            False), accelerator=\"Ctrl+N\")\r\n        fileMenu.add_command(label=\"New Window    \", command=lambda: self.new_window(\r\n            False), accelerator=\"Ctrl+Shift+N\")\r\n        fileMenu.add_separator()\r\n        fileMenu.add_command(label=\"Open\", command=lambda: self.open_file(\r\n            False), accelerator=\"Ctrl+O\")\r\n        fileMenu.add_command(label=\"Save...\", command=lambda: self.save_file(\r\n            False), accelerator=\"Ctrl+S\")\r\n        fileMenu.add_command(label=\"Save As\", command=lambda: self.save_as(\r\n            False), accelerator=\"Ctrl+Shift+S\")\r\n        fileMenu.add_separator()\r\n        fileMenu.add_command(label=\"Exit\", command=lambda: self.quit(\r\n            False), accelerator=\"Ctrl+Q\")\r\n\r\n        menuBar.add_cascade(label=\"File\", menu=fileMenu)\r\n\r\n        # Edit Menu\r\n        editMenu = tk.Menu(menuBar, tearoff=0, bg=\"#f2fef7\")\r\n        editMenu.add_command(label=\"Cut\", command=lambda: self.cut(\r\n            False), accelerator=\"Ctrl+X\")\r\n        editMenu.add_command(label=\"Copy\", command=lambda: self.copy(\r\n            False), accelerator=\"Ctrl+C\")\r\n        editMenu.add_command(label=\"Paste\", command=lambda: self.paste(\r\n            False), accelerator=\"Ctrl+V\")\r\n        editMenu.add_separator()\r\n        editMenu.add_command(label=\"Select All\", command=lambda: self.select_all(\r\n            False), accelerator=\"Ctrl+A\")\r\n        editMenu.add_separator()\r\n\r\n\r\n\r\n        editMenu.add_command(label=\"Clear the page\", command=lambda : self.clear(False))\r\n        editMenu.add_command(label=\"Background color\", command=lambda : self.change_back_ground_color())\r\n        editMenu.add_command(label=\"Font color\", command=lambda: self.change_font_color())\r\n\r\n\r\n        menuBar.add_cascade(label=\"Edit\", menu=editMenu)\r\n\r\n        # View Menu\r\n        viewMenu = tk.Menu(menuBar, tearoff=0, bg=\"#f2fef7\")\r\n        zoomMenu = tk.Menu(viewMenu, tearoff=0, bg=\"#f2fef7\")\r\n        viewMenu.add_cascade(label=\"Zoom\", menu=zoomMenu)\r\n\r\n        zoomMenu.add_command(label=\"Zoom in\", command=lambda : self.zoomIn())\r\n        zoomMenu.add_command(label=\"Zoom out\", command=lambda : self.zoomOut())\r\n\r\n        viewMenu.add_separator()\r\n        viewMenu.add_command(label=\"Status bar\", command=\"\", accelerator=\"Comming Soon\", activebackground=\"red\", activeforeground=\"white\")\r\n\r\n        menuBar.add_cascade(label=\"View\", menu=viewMenu)\r\n\r\n        # About Menu\r\n        aboutMenu = tk.Menu(menuBar, tearoff=0, bg=\"#f2fef7\")\r\n        aboutMenu.add_command(label=\"About Notepad AI\", command=self.about)\r\n        menuBar.add_cascade(label=\"About\", menu=aboutMenu)\r\n\r\n        # report bug menu\r\n        bugMenu = tk.Menu(menuBar, bg=\"#f2fef7\", borderwidth=0)\r\n        bugMenu.add_command(label=\"Report a bug\", command=lambda: self.bugPopUp())\r\n        menuBar.add_cascade(label=\"report\", menu=bugMenu)\r\n        # Scrollbar\r\n        scrollbar = tk.Scrollbar(self.master, background=\"#f2fef7\")\r\n        scrollbar.pack(side=\"right\", fill=\"y\")\r\n\r\n        # text Area\r\n        global textArea\r\n        textArea = tk.Text(self.master, borderwidth=0,\r\n                           font=font,\r\n                           selectbackground=\"skyblue\",\r\n                           selectforeground=\"black\",\r\n                           yscrollcommand=scrollbar.set,\r\n                           undo=True,\r\n                           highlightthickness=0)\r\n        textArea.pack(fill=tk.BOTH, expand=True)\r\n\r\n        # Status bar\r\n        global statusBar\r\n        statusBar = tk.Label(self.master, text=\"Status\",\r\n                             borderwidth=0, height=1, bg=\"#f2fef7\", anchor=tk.E, padx=10)\r\n        statusBar.pack(side=tk.RIGHT)\r\n\r\n        # Cofigure scrollbar\r\n        scrollbar.config(command=textArea.yview)\r\n\r\n        # Columns and Rows\r\n        global colandline\r\n        colandline = tk.Label(self.master,\r\n                              borderwidth=0, height=1, bg=\"#f2fef7\", anchor=tk.W, padx=10)\r\n        colandline.pack(side=tk.LEFT)\r\n\r\n        # Col & line status bar\r\n        def rowcol(ev=None):\r\n            r, c = textArea.index('insert').split('.')\r\n            colandline['text'] = f'Ln {r} , Col {c}'\r\n\r\n        textArea.event_add(\r\n            '<<REACT>>', *('<Motion>', '<ButtonRelease>', '<KeyPress>', '<KeyRelease>'))\r\n        b = textArea.bind('<<REACT>>', rowcol)\r\n        rowcol()  # get the ball rolling\r\n        textArea.focus()\r\n\r\n        # Right click Menu\r\n        rcMenu = tk.Menu(textArea, tearoff=0, bg=\"#f2fef7\")\r\n        def menu_commands(e):\r\n            if e == 1:    \r\n                rcMenu.add_command(label=\"Add to dictionary\", command=lambda: self.add_to_Dictionary(False))\r\n                rcMenu.add_command(label=\"Search Google\", command=lambda: self.searsh(False))\r\n                rcMenu.add_separator()\r\n            if e == 2:    \r\n                rcMenu.add_command(label=\"Search Google\", command=lambda: self.searsh(False))\r\n                rcMenu.add_separator()\r\n            rcMenu.add_command(label=\"Scan for errors\", command=lambda: self.scaner(False), accelerator=\"Alt+C\")\r\n            rcMenu.add_separator()\r\n            rcMenu.add_command(label=\"Cut\", command=lambda: self.cut(\r\n                        False), accelerator=\"Ctrl+X\")\r\n            rcMenu.add_command(label=\"Copy\", command=lambda: self.copy(\r\n                        False), accelerator=\"Ctrl+C\")\r\n            rcMenu.add_command(label=\"Paste\", command=lambda: self.paste(\r\n                        False), accelerator=\"Ctrl+V\")\r\n            rcMenu.add_separator()\r\n            rcMenu.add_command(label=\"Exit\", command=lambda: self.quit(False))\r\n\r\n        # Binding for the right click menu\r\n        # Call rcMenu\r\n        def call_rcMenu(e):\r\n            rcMenu.delete(0, tk.END)\r\n            call_suggestions_menu(e)\r\n            rcMenu.tk_popup(e.x_root, e.y_root)\r\n\r\n        def call_suggestions_menu(e):\r\n            # START\r\n            location = textArea.index('current')\r\n\r\n            col = int(location.split('.')[1])\r\n            row = int(location.split('.')[0])\r\n            letter = textArea.get(str(row) + \".\" + str(col))\r\n            print(\"letter\" + letter.strip() + \"fucking\")\r\n            if letter.strip() != \"\":\r\n\r\n                search = True\r\n                while search:\r\n                    if letter != \" \" and col != 0:\r\n                        col -= 1\r\n                        letter = textArea.get(str(row) + \".\" + str(col))\r\n                    else:\r\n                        search = False\r\n                if col == 0:\r\n                    start = str(row) + \".\" + str(col)\r\n                else:\r\n                    start = str(row) + \".\" + str(col + 1)\r\n\r\n                # END\r\n                location = textArea.index('current')\r\n\r\n                col = int(location.split('.')[1])\r\n                row = int(location.split('.')[0])\r\n                letter = textArea.get(location)\r\n                search = True\r\n                while search:\r\n                    if letter != \" \" and col != 0:\r\n                        col += 1\r\n                        letter = textArea.get(str(row) + \".\" + str(col))\r\n                    else:\r\n                        search = False\r\n                end = str(row) + \".\" + str(col)\r\n\r\n                textArea.tag_add(tk.SEL, start, end)\r\n\r\n                word = textArea.get(start, end)\r\n                with open('Model/vocab.pkl', 'rb') as f:\r\n                    updated_vocab = pickle.load(f)\r\n                    f.close()\r\n                with open('Model/probs.pkl', 'rb') as f:\r\n                    updated_probs = pickle.load(f)\r\n                    f.close()\r\n                if word not in updated_vocab:\r\n                    list_ = get_corrections(word, updated_probs, updated_vocab)\r\n                    print('hdachi ll dayr lmachkil ', list_)\r\n                    if len(list_) != 0:\r\n                        list_ = [list_[i][0] for i in range(len(list_))]\r\n\r\n                        labels = list_[:5]\r\n                        # suggestion_med = map(list_,min_edit_distance())\r\n                        suggestion_med = [min_edit_distance(word, list_[i]) for i in range(len(list_))]\r\n                        print('sugg med', suggestion_med)\r\n                        print('list sugg', list_)\r\n                        word_med = {}\r\n                        for i in range(len(list_)):\r\n                            # word_med.update({tuple(list_[i]): suggestion_med[i]})  # Convert list_[i] to a tuple\r\n                            word_med.update({\"\".join(list_[i]): suggestion_med[i]})\r\n                        sorted_suggestion = dict(sorted(word_med.items(), key=lambda x: x[1]))\r\n                        print('word_med', word_med)\r\n                        print('sorted ', sorted_suggestion)\r\n                        sorted_keys = list(sorted_suggestion.keys())\r\n                        sorted_values = list(sorted_suggestion.values())\r\n\r\n                        # sorted_labels = sorted(labels, key=lambda x: x[1], reverse=True)\r\n                        # suggestions = [sorted_labels[i][0] for i in range(len(sorted_labels))]\r\n\r\n                        # Right click Menu that will contain the words\r\n                        def sugg1():\r\n                            textArea.replace(start, end, sorted_keys[0])\r\n\r\n                        def sugg2():\r\n                            textArea.replace(start, end, sorted_keys[1])\r\n\r\n                        def sugg3():\r\n                            textArea.replace(start, end, sorted_keys[2])\r\n\r\n                        def sugg4():\r\n                            textArea.replace(start, end, sorted_keys[3])\r\n\r\n                        def sugg5():\r\n                            textArea.replace(start, end, sorted_keys[4])\r\n\r\n                        for i in range(len(sorted_suggestion)):\r\n                            if i == 0:\r\n                                rcMenu.add_command(label=sorted_keys[i], command=sugg1,\r\n                                                   accelerator='med(' + str(sorted_values[i]) + ')')\r\n\r\n                            if i == 1:\r\n                                rcMenu.add_command(label=sorted_keys[i], command=sugg2,\r\n                                                   accelerator='med(' + str(sorted_values[i]) + ')')\r\n\r\n                            if i == 2:\r\n                                rcMenu.add_command(label=sorted_keys[i], command=sugg3,\r\n                                                   accelerator='med(' + str(sorted_values[i]) + ')')\r\n\r\n                            if i == 3:\r\n                                rcMenu.add_command(label=sorted_keys[i], command=sugg4,\r\n                                                   accelerator='med(' + str(sorted_values[i]) + ')')\r\n\r\n                            if i == 4:\r\n                                rcMenu.add_command(label=sorted_keys[i], command=sugg5,\r\n                                                   accelerator='med(' + str(sorted_values[i]) + ')')\r\n                    rcMenu.add_separator()\r\n                    menu_commands(1)\r\n                else:\r\n                    menu_commands(2)\r\n            else:\r\n                menu_commands(0)\r\n\r\n        textArea.bind(\"<Button-3>\",call_rcMenu)\r\n\r\n        # Edit binding\r\n        self.master.bind(\"<Control-Key-x>\", self.cut)\r\n        self.master.bind(\"<Control-Key-X>\", self.cut)\r\n        self.master.bind(\"<Control-Key-c>\", self.copy)\r\n        self.master.bind(\"<Control-Key-C>\", self.copy)\r\n        self.master.bind(\"<Control-Key-v>\", self.paste)\r\n        self.master.bind(\"<Control-Key-V>\", self.paste)\r\n        self.master.bind(\"<Control-Key-n>\", self.new_file)\r\n        self.master.bind(\"<Control-Key-s>\", self.save_file)\r\n        self.master.bind(\"<Control-S>\", self.save_as)\r\n        self.master.bind(\"<Control-Key-o>\", self.open_file)\r\n        self.master.bind(\"<Control-Key-O>\", self.open_file)\r\n        self.master.bind(\"<Control-Key-q>\", self.quit)\r\n        self.master.bind(\"<Control-Key-Q>\", self.quit)\r\n        self.master.bind(\"<Control-N>\", self.new_window)\r\n        self.master.bind(\"<Control-Key-a>\", self.select_all)\r\n        self.master.bind(\"<Control-Key-A>\", self.select_all)\r\n        self.master.bind(\"<space>\", self.correct)\r\n        self.master.bind(\"<Return>\", self.correct)\r\n        self.master.bind(\"<Alt-Key-c>\", self.scaner)\r\n        self.master.bind(\"<Alt-Key-C>\", self.scaner)\r\n\r\n        self.master.bind(\"<Control-plus>\",self.zoomIn)\r\n        self.master.bind(\"<Control-minus>\", self.zoomOut)\r\n\r\n\r\n\r\n    def location(self, e):\r\n        location = textArea.index('current')\r\n\r\n        col = int(location.split('.')[1])\r\n        row = int(location.split('.')[0])\r\n        letter = textArea.get(str(row) + \".\" + str(col))\r\n        search = True\r\n        while search:\r\n            if letter != \" \" and col != 0:\r\n                col -= 1\r\n                letter = textArea.get(str(row) + \".\" + str(col))\r\n            else:\r\n                search = False\r\n        if col == 0:\r\n            start = str(row) + \".\" + str(col)\r\n        else:\r\n            start = str(row) + \".\" + str(col + 1)\r\n\r\n        # END\r\n        word_len = len(textArea.get(start, tk.END).split(\" \")[0])\r\n        end = str(row) + \".\" + str(col + word_len+1)\r\n        return start, end\r\n    \r\n    def searsh(self,e):\r\n        start, end = self.location(e)\r\n        # remove underline\r\n        textArea.tag_config(\"underline\", underline=False)\r\n        textArea.tag_add(\"underline\", start, end)\r\n\r\n        # add word to vocabulary\r\n        word = textArea.get(start, end).lower()\r\n        url = 'https://www.google.com/search?q='+word\r\n        webbrowser.open_new_tab(url)\r\n\r\n    def add_to_Dictionary(self, e):\r\n        start, end = self.location(e)\r\n        # remove underline\r\n        \r\n        textArea.tag_add(\"underline\",start,end)\r\n        textArea.tag_config(\"underline\", underline=False)\r\n\r\n        # add word to vocabulary\r\n        word = textArea.get(start,end).lower()\r\n        print(word)\r\n        vocab.add(word)\r\n\r\n        # add word to probabilities\r\n        probs[str(textArea.tag_add(\"underline\",start,end))]=1e-06\r\n        print('word ',textArea.get(start,end),'added to vocab and will not be underlined')\r\n\r\n        with open('Model/vocab.pkl','wb') as f:\r\n            pickle.dump(vocab,f)\r\n            f.close()\r\n\r\n        with open('Model/probs.pkl', 'wb') as s:\r\n            pickle.dump(probs, s)\r\n            s.close()\r\n\r\n        self.correct(False)\r\n\r\n    def last(self, e):\r\n        text = textArea.get(1.0, tk.END).strip().lower()\r\n        print(\"letter\"+text+\"fucking\")\r\n        #w = text.split(\" \")[-1]\r\n        if text != \"\":\r\n            lis = re.findall('\\w+', text)\r\n            print('list ',lis)\r\n            w = lis[-1]\r\n\r\n            print(w)\r\n            return str(w).strip().lower()\r\n\r\n    def scaner(self, e):\r\n        text = textArea.get(1.0, tk.END).strip().lower()\r\n        if text != \"\":\r\n            list_ = re.findall('\\w+', text)\r\n            for w in list_:\r\n                start_index = '1.0'\r\n                with open('Model/vocab.pkl','rb') as f :\r\n                    updated_vocab = pickle.load(f)\r\n                # we loop through the entire textarea to get all occurences of w not only first one\r\n                while True:\r\n                    pos_start = textArea.search(w, start_index, tk.END)\r\n                    if not pos_start:\r\n                        break\r\n                    pos_end = pos_start + f'+{len(w)}c'\r\n                    if w not in updated_vocab:\r\n                        textArea.tag_config(\"underline\", underline=True, underlinefg=\"red\")\r\n                        textArea.tag_add(\"underline\", pos_start, pos_end)\r\n                    start_index = pos_end\r\n\r\n    \r\n    # Correct word\r\n\r\n    def correct(self, e):\r\n        w = self.last(e)\r\n        start_index = '1.0'\r\n        with open('Model/vocab.pkl','rb') as f :\r\n            updated_vocab = pickle.load(f)\r\n        # we loop through the entire textarea to get all occurences of w not only first one\r\n        while True:\r\n            pos_start = textArea.search(w, start_index, tk.END)\r\n            if not pos_start:\r\n                break\r\n            pos_end = pos_start + f'+{len(w)}c'\r\n            if w not in updated_vocab:\r\n                textArea.tag_config(\"underline\", underline=True, underlinefg=\"red\")\r\n                textArea.tag_add(\"underline\", pos_start, pos_end)\r\n            start_index = pos_end\r\n\r\n\r\n    # Quit\r\n\r\n    def quit(self, e):\r\n        answer = messagebox.askyesno(title= \"Exit\",message=\"Are you sure you want to quit?\")\r\n        if answer:\r\n            self.master.quit()\r\n\r\n    # New file\r\n\r\n    def new_file(self, e):\r\n        textArea.delete(\"1.0\", tk.END)\r\n        self.master.title(\"New File   - AI Notepad\")\r\n        statusBar.config(text=\"New File\")\r\n\r\n        global current_opened_file\r\n        current_opened_file = False\r\n\r\n    # open file\r\n\r\n    def open_file(self, e):\r\n        textArea.delete(\"1.0\", tk.END)\r\n\r\n        # get file name\r\n        filename = filedialog.askopenfilename(title=\"Open File\", filetypes=((\"All Files\", \"*.*\"),\r\n                                                                            (\"Text file\",\r\n                                                                             \"*.txt\"),\r\n                                                                            (\"SQL file\",\r\n                                                                             \"*.sql\"),\r\n                                                                            (\"HTML file\",\r\n                                                                             \"*.html\"),\r\n                                                                            (\"Python file\",\r\n                                                                             \"*.py\")\r\n                                                                            ))\r\n\r\n        # Get the current file name\r\n        global current_opened_file\r\n        current_opened_file = filename\r\n\r\n        # Get the name of the file\r\n        name = filename.split(\"/\")[-1]\r\n        name = name[:name.find(\".\")]\r\n\r\n        # title\r\n        self.master.title(f'{name}   - AI Notepad')\r\n\r\n        # Status\r\n        statusBar.config(text=filename)\r\n\r\n        # Open file\r\n        text_file = open(filename, 'r')\r\n        text = text_file.read()\r\n\r\n        textArea.insert(tk.END, text)\r\n\r\n        # Closing the file\r\n        text_file.close()\r\n\r\n    # New Window\r\n\r\n    def new_window(self, e):\r\n        root = tk.Tk()\r\n        NotepadUI(root)\r\n        root.mainloop()\r\n\r\n    # Save As File\r\n\r\n    def save_as(self, e):\r\n\r\n        # get file name\r\n        filename = filedialog.asksaveasfilename(defaultextension=\".txt\", title=\"Save As\", filetypes=(\r\n            (\"All file\", \"*.*\"),\r\n            (\"Text file\",\r\n             \"*.txt\"),\r\n            (\"SQL file\",\r\n             \"*.sql\"),\r\n            (\"HTML file\",\r\n             \"*.html\"),\r\n            (\"Python file\",\r\n             \"*.py\")\r\n        ))\r\n        if filename:\r\n            name = filename.split(\"/\")[-1]\r\n            name = name[:name.find(\".\")]\r\n\r\n            # title\r\n            self.master.title(f'{name}   - AI Notepad')\r\n\r\n            # Status\r\n            statusBar.config(text=f'{filename}   - Saved')\r\n\r\n            # Save file\r\n            text_file = open(filename, 'w')\r\n            text_file.write(textArea.get(1.0, tk.END))\r\n\r\n            # Closing the file\r\n            text_file.close()\r\n\r\n    # Save File\r\n\r\n    def save_file(self, e):\r\n\r\n        if current_opened_file:\r\n            # Save file\r\n            text_file = open(current_opened_file, 'w')\r\n            text_file.write(textArea.get(1.0, tk.END))\r\n\r\n            # Status\r\n            statusBar.config(text=f'{current_opened_file}   - Saved')\r\n\r\n            # Closing the file\r\n            text_file.close()\r\n        else:\r\n            self.save_as(e)\r\n\r\n    # select all\r\n\r\n    def select_all(self, e):\r\n        textArea.tag_add(tk.SEL, \"1.0\", tk.END)\r\n        textArea.mark_set(tk.INSERT, \"1.0\")\r\n        textArea.see(tk.INSERT)\r\n        return 'break'\r\n\r\n    # Cut function\r\n\r\n    def cut(self, e):\r\n        global selected\r\n        # Checking if we used the shortcut\r\n        if e:\r\n            selected = self.master.clipboard_get()\r\n        elif textArea.selection_get():\r\n            selected = textArea.selection_get()\r\n            # delete the selected\r\n            textArea.delete(\"sel.first\", \"sel.last\")\r\n            self.master.clipboard_clear()\r\n            self.master.clipboard_append(selected)\r\n\r\n    # Copy function\r\n\r\n    def copy(self, e):\r\n        global selected\r\n        if e:\r\n            selected = self.master.clipboard_get()\r\n        elif textArea.selection_get():\r\n            selected = textArea.selection_get()\r\n            self.master.clipboard_clear()\r\n            self.master.clipboard_append(selected)\r\n\r\n    # Paste function\r\n    def paste(self, e):\r\n        global selected\r\n        if e:\r\n            selected = self.master.clipboard_get()\r\n        elif selected:\r\n            position = textArea.index(tk.INSERT)\r\n            textArea.insert(position, selected)\r\n            self.master.clipboard_clear()\r\n            self.master.clipboard_append(selected)\r\n    \r\n    def zoom(self, e):\r\n        global font\r\n        if e:\r\n            font[1] = font[1] + 2 \r\n        else:\r\n            font[1] = font[1] - 2 \r\n        textArea.configure(font=font)\r\n\r\n\r\n    # About Message function\r\n    def about(self):\r\n        messagebox.showinfo(\r\n            title=\"Welcome User!\",\r\n            message=\"This an intelligent notepad that will auto-correct & auto-complete your notes!\\n Have a great day!\")\r\n\r\n    def clear(self, e):\r\n        textArea.delete(1.0,tk.END)\r\n\r\n    def change_back_ground_color(self):\r\n        color = colorchooser.askcolor()[1]  # Open color dialog and get the chosen color\r\n        textArea.config(bg=color)\r\n\r\n    def change_font_color(self):\r\n        # Open a color chooser dialog\r\n        color = colorchooser.askcolor()[1]\r\n\r\n        # Delete any existing \"default\" tag\r\n        textArea.tag_delete(\"default\")\r\n\r\n        # Configure a new \"default\" tag with the selected color\r\n        textArea.tag_configure(\"default\", foreground=color)\r\n\r\n        # Apply the \"default\" tag to all existing text in the Text widget\r\n        textArea.tag_add(\"default\", \"1.0\", tk.END)\r\n\r\n    def zoomIn(self,e):\r\n        # Get the current font size of the Text widget\r\n        current_font = textArea['font']\r\n\r\n        font_size = int(current_font.split(' ')[-1])\r\n\r\n        # Calculate the new font size after applying the zoom factor\r\n        new_font_size = int(font_size +2)\r\n\r\n        # Update the font size in the Text widget\r\n        textArea.config(font=(current_font.split(' ')[0], new_font_size))\r\n\r\n    def zoomOut(self,e):\r\n        current_font = textArea['font']\r\n        print(current_font)\r\n        font_size = int(current_font.split(' ')[-1])\r\n\r\n        # Calculate the new font size after applying the zoom factor\r\n        new_font_size = int(font_size - 2)\r\n\r\n        # Update the font size in the Text widget\r\n        textArea.config(font=(current_font.split(' ')[0], new_font_size))\r\n\r\n    def bugPopUp(self):\r\n        top = tk.Toplevel(root)\r\n        top.geometry(\"750x750\")\r\n        top.title(\"Report a bug in the notepad\")\r\n        photo = tk.PhotoImage(file='website/rsc/JT.png')\r\n        top.wm_iconphoto(False, photo)\r\n        Label(top, text=\"Enter your email\", font=('Mistral 14')).place(x=50, y=10)\r\n        emailfield = tk.Text(top, height=2, width=40 )\r\n        Label(top, text=\"describe the bug\", font=('Mistral 14')).place(x=50, y=80)\r\n        reportfield = tk.Text(top, height=20, width=40)\r\n\r\n        emailfield.pack()\r\n        reportfield.pack()\r\n        emailfield.place(x=200, y=10)\r\n        reportfield.place(x=200, y=80)\r\n        send = tk.Button(top,command=lambda :self.sendEmail(top,emailfield.get(1.0,tk.END),reportfield.get(1.0,tk.END)),text='Send Report',height=2,width=10)\r\n        send.pack()\r\n        send.place(x=345, y=475)\r\n\r\n    def sendEmail(self,top,email,report):\r\n        import smtplib\r\n        import ssl\r\n        sent_from= 'je.notepad.nlp@gmail.com'\r\n        gmail_password = 'zverinwdaamwoeim'\r\n\r\n        to = ['badreddinejalili@gmail.com', 'mohammed.tati21@gmail.com']\r\n        subject = 'Bug Report - Email: '  + email.strip()\r\n        print(subject)\r\n        body = report\r\n\r\n        email_text = \"\"\"\\\r\n           From: %s\r\n           To: %s\r\n           Subject: %s\r\n\r\n           %s\r\n           \"\"\" % (sent_from, \", \".join(to), subject, body)\r\n\r\n        try:\r\n            smtp_server = smtplib.SMTP_SSL('smtp.gmail.com', 465)\r\n            smtp_server.ehlo()\r\n            smtp_server.login(sent_from, gmail_password)\r\n            smtp_server.sendmail(sent_from, to, email_text)\r\n            smtp_server.close()\r\n            print(\"Email sent successfully!\")\r\n        except Exception as ex:\r\n            print(\"Something went wrong...\", ex)\r\n        print(email.strip(),report.strip())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Create and show the UI\r\n    root = tk.Tk()\r\n    NotepadUI(root)\r\n    root.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision f05cafc641129c1321a5e97028df8989b7ed1d2b)
+++ b/main.py	(date 1681971611801)
@@ -100,7 +100,7 @@
         menuBar.add_cascade(label="About", menu=aboutMenu)
 
         # report bug menu
-        bugMenu = tk.Menu(menuBar, bg="#f2fef7", borderwidth=0)
+        bugMenu = tk.Menu(menuBar, bg="#f2fef7", tearoff=0,borderwidth=0)
         bugMenu.add_command(label="Report a bug", command=lambda: self.bugPopUp())
         menuBar.add_cascade(label="report", menu=bugMenu)
         # Scrollbar
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2c1b3610-46b9-4a35-9d30-9756578558a0\" name=\"Changes\" comment=\"report a bug\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2OVXty82s1kkoqTfhtfXLzVypPt\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/lenovo/PycharmProjects/AINotePad&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Python.main (1)\">\r\n    <configuration name=\"edit\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"AI NotePad\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Model\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Model/edit.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"AI NotePad\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"AI NotePad\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/UI\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/UI/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main (1)\" />\r\n        <item itemvalue=\"Python.edit\" />\r\n        <item itemvalue=\"Python.main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2c1b3610-46b9-4a35-9d30-9756578558a0\" name=\"Changes\" comment=\"\" />\r\n      <created>1681646942647</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1681646942647</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"probability_dict added\">\r\n      <created>1681663944738</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681663944738</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"pickle file loaded\">\r\n      <created>1681664145113</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681664145113</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"string manipulatinos\">\r\n      <created>1681665719375</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681665719375</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"probabilistic model implemented\">\r\n      <created>1681683408566</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681683408566</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"package error\">\r\n      <created>1681686874152</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681686874152</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"final touchs\">\r\n      <created>1681689075631</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681689075631</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"pickle files loaded\">\r\n      <created>1681689181343</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681689181343</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"red underline\">\r\n      <created>1681691909654</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681691909748</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"add to dictioanary created\">\r\n      <created>1681744588824</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681744588824</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"vocab update now get saved to pickle file\">\r\n      <created>1681747167920</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681747167920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"google searsh added\">\r\n      <created>1681833646137</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681833646137</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"sort suggestion by minimum edit distance\">\r\n      <created>1681920251328</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681920251328</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"sort suggestion by minimum edit distance 1\">\r\n      <created>1681928046228</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681928046228</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"sort suggestion by Min Edit Dist\">\r\n      <created>1681952114974</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681952114974</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"sougg_i function indexes corrected\">\r\n      <created>1681953272804</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681953272804</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"sugg_i function indexes corrected\">\r\n      <created>1681953301861</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681953301861</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"clear page and change background color\">\r\n      <created>1681955037689</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681955037689</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"zoom in/out added\">\r\n      <created>1681956635389</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681956635389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"zoom in/out by 2\">\r\n      <created>1681956679554</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681956679554</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"report a bug\">\r\n      <created>1681970496424</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681970496424</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"21\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"COLUMN_ID_ORDER\">\r\n      <list>\r\n        <option value=\"Default.Root\" />\r\n        <option value=\"Default.Author\" />\r\n        <option value=\"Default.Date\" />\r\n        <option value=\"Default.Subject\" />\r\n        <option value=\"Space.CommitStatus\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"probability_dict added\" />\r\n    <MESSAGE value=\"pickle file loaded\" />\r\n    <MESSAGE value=\"string manipulatinos\" />\r\n    <MESSAGE value=\"probabilistic model implemented\" />\r\n    <MESSAGE value=\"package error\" />\r\n    <MESSAGE value=\"final touchs\" />\r\n    <MESSAGE value=\"pickle files loaded\" />\r\n    <MESSAGE value=\"red underline\" />\r\n    <MESSAGE value=\"add to dictioanary created\" />\r\n    <MESSAGE value=\"vocab update now get saved to pickle file\" />\r\n    <MESSAGE value=\"google searsh added\" />\r\n    <MESSAGE value=\"sort suggestion by minimum edit distance\" />\r\n    <MESSAGE value=\"sort suggestion by minimum edit distance 1\" />\r\n    <MESSAGE value=\"sort suggestion by Min Edit Dist\" />\r\n    <MESSAGE value=\"sougg_i function indexes corrected\" />\r\n    <MESSAGE value=\"sugg_i function indexes corrected\" />\r\n    <MESSAGE value=\"clear page and change background color\" />\r\n    <MESSAGE value=\"zoom in/out added\" />\r\n    <MESSAGE value=\"zoom in/out by 2\" />\r\n    <MESSAGE value=\"report a bug\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"report a bug\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f05cafc641129c1321a5e97028df8989b7ed1d2b)
+++ b/.idea/workspace.xml	(date 1681994706618)
@@ -4,7 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="2c1b3610-46b9-4a35-9d30-9756578558a0" name="Changes" comment="report a bug" />
+    <list default="true" id="2c1b3610-46b9-4a35-9d30-9756578558a0" name="Changes" comment="report a bug">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -257,7 +260,14 @@
       <option name="project" value="LOCAL" />
       <updated>1681970496424</updated>
     </task>
-    <option name="localTasksCounter" value="21" />
+    <task id="LOCAL-00021" summary="report a bug">
+      <created>1681970853007</created>
+      <option name="number" value="00021" />
+      <option name="presentableId" value="LOCAL-00021" />
+      <option name="project" value="LOCAL" />
+      <updated>1681970853007</updated>
+    </task>
+    <option name="localTasksCounter" value="22" />
     <servers />
   </component>
   <component name="Vcs.Log.History.Properties">
